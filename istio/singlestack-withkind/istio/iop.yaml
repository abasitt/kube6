apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    defaultConfig:
      proxyMetadata:
        # Enable basic DNS proxying
        ISTIO_META_DNS_CAPTURE: "true"
        # Enable automatic address allocation, optional
        ISTIO_META_DNS_AUTO_ALLOCATE: "true"
    #accessLogFile: /dev/stdout
    defaultProviders:
      accessLogging:
        #- file-log
        - file-json
    extensionProviders:
      - name: file-log
        envoyFileAccessLog:
          path: /dev/stdout
          logFormat:
            text: "[%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %RESPONSE_CODE_DETAILS% \"%UPSTREAM_TRANSPORT_FAILURE_REASON%\" %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(:AUTHORITY)%\" \"%UPSTREAM_HOST%\" %UPSTREAM_CLUSTER% %UPSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_REMOTE_ADDRESS% %REQUESTED_SERVER_NAME% %ROUTE_NAME%\n"
      - name: file-json
        envoyFileAccessLog:
          path: /dev/stdout
          logFormat:
            labels:
              "start_time": "[%START_TIME%]"
              "method": "%REQ(:METHOD)%"
              "path": "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
              "protocol": "%PROTOCOL%"
              "reponse_code": "%RESPONSE_CODE%"
              "reponse_flags": "%RESPONSE_FLAGS%"
              "repons_code_details": "%RESPONSE_CODE_DETAILS%"
              "failure_reason": "%UPSTREAM_TRANSPORT_FAILURE_REASON%"
              "bytes_received": "%BYTES_RECEIVED% %BYTES_SENT%"
              "duration": "%DURATION%"
              "envoy_upstream_service_time": "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%"
              "forwarded_for": "%REQ(X-FORWARDED-FOR)%"
              "user_agent": "%REQ(USER-AGENT)%"
              "request_id": "%REQ(X-REQUEST-ID)%"
              "authority": "%REQ(:AUTHORITY)%"
              "host": "%UPSTREAM_HOST%"
              "upstream_cluster": "%UPSTREAM_CLUSTER%"
              "upstream_local_adress": "%UPSTREAM_LOCAL_ADDRESS%"
              "downstream_local_address": "%DOWNSTREAM_LOCAL_ADDRESS%"
              "downstream_remote_address": "%DOWNSTREAM_REMOTE_ADDRESS%"
              "requested_server_name": "%REQUESTED_SERVER_NAME%"
              "route_name": "%ROUTE_NAME%"
              # "downstream_peer_id": "%FILTER_STATE(wasm.downstream_peer_id)%"
              # "upstream_peer_id": "%FILTER_STATE(wasm.upstream_peer_id)%"
              # "downstream_peer": "%FILTER_STATE(wasm.downstream_peer)%"
              # "upstream_peer": "%FILTER_STATE(wasm.upstream_peer)%"
              "cluster_metadata": "%CLUSTER_METADATA(istio)%"
              "upstream_metadata": "%UPSTREAM_METADATA(istio)%"
              # "route_metadata": "%METADATA(ROUTE:istio)%" # need enable envoy.formatter.metadata

  components:
    ingressGateways:
    - name: istio-ingressgateway
      enabled: true
      k8s:
        resources:
          requests:
            cpu: 10m
            memory: 40Mi
        service:
          ports:
            ## You can add custom gateway ports in user values overrides, but it must include those ports since helm replaces.
            # Note that AWS ELB will by default perform health checks on the first port
            # on this list. Setting this to the health check port will ensure that health
            # checks always work. https://github.com/istio/istio/issues/12503
            - port: 15021
              targetPort: 15021
              name: status-port
            - port: 80
              targetPort: 8080
              name: http2
            - port: 443
              targetPort: 8443
              name: https
            - port: 31400
              targetPort: 31400
              name: tcp
              # This is the port where sni routing happens
            - port: 15443
              targetPort: 15443
              name: tls

    egressGateways:
    - name: istio-egressgateway
      enabled: true
      k8s:
        resources:
          requests:
            cpu: 10m
            memory: 40Mi

    pilot:
      k8s:
        env:
          - name: PILOT_TRACE_SAMPLING
            value: "100"
        resources:
          requests:
            cpu: 10m
            memory: 100Mi

  values:
    global:
      proxy:
        resources:
          requests:
            cpu: 10m
            memory: 40Mi

    pilot:
      autoscaleEnabled: false

    gateways:
      istio-egressgateway:
        autoscaleEnabled: false
      istio-ingressgateway:
        autoscaleEnabled: false